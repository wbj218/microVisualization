<?php
namespace NetflixMicroservices;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Review {
  static $_TSPEC;

  /**
   * @var string
   */
  public $unique_id = null;
  /**
   * @var string
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $text = null;
  /**
   * @var string
   */
  public $rating = null;
  /**
   * @var string
   */
  public $movie_id = null;
  /**
   * @var string
   */
  public $req_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'rating',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'movie_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'req_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['unique_id'])) {
        $this->unique_id = $vals['unique_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['rating'])) {
        $this->rating = $vals['rating'];
      }
      if (isset($vals['movie_id'])) {
        $this->movie_id = $vals['movie_id'];
      }
      if (isset($vals['req_id'])) {
        $this->req_id = $vals['req_id'];
      }
    }
  }

  public function getName() {
    return 'Review';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unique_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->movie_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->req_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Review');
    if ($this->unique_id !== null) {
      $xfer += $output->writeFieldBegin('unique_id', TType::STRING, 1);
      $xfer += $output->writeString($this->unique_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::STRING, 2);
      $xfer += $output->writeString($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 3);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rating !== null) {
      $xfer += $output->writeFieldBegin('rating', TType::STRING, 4);
      $xfer += $output->writeString($this->rating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->movie_id !== null) {
      $xfer += $output->writeFieldBegin('movie_id', TType::STRING, 5);
      $xfer += $output->writeString($this->movie_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->req_id !== null) {
      $xfer += $output->writeFieldBegin('req_id', TType::STRING, 6);
      $xfer += $output->writeString($this->req_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CastInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $cast_id = null;
  /**
   * @var string
   */
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cast_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cast_id'])) {
        $this->cast_id = $vals['cast_id'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'CastInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cast_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CastInfo');
    if ($this->cast_id !== null) {
      $xfer += $output->writeFieldBegin('cast_id', TType::STRING, 1);
      $xfer += $output->writeString($this->cast_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      $xfer += $output->writeFieldBegin('info', TType::STRING, 2);
      $xfer += $output->writeString($this->info);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoviePage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $movie_id = null;
  /**
   * @var string
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $req_id = null;
  /**
   * @var \NetflixMicroservices\CastInfo[]
   */
  public $cast_info = null;
  /**
   * @var string
   */
  public $plot = null;
  /**
   * @var string
   */
  public $thumbnail = null;
  /**
   * @var string
   */
  public $rating = null;
  /**
   * @var string[]
   */
  public $watch_next = null;
  /**
   * @var \NetflixMicroservices\Review[]
   */
  public $reviews = null;
  /**
   * @var string
   */
  public $photo = null;
  /**
   * @var string
   */
  public $video = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'movie_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'req_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cast_info',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NetflixMicroservices\CastInfo',
            ),
          ),
        5 => array(
          'var' => 'plot',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'thumbnail',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'rating',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'watch_next',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'reviews',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\NetflixMicroservices\Review',
            ),
          ),
        10 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'video',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['movie_id'])) {
        $this->movie_id = $vals['movie_id'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['req_id'])) {
        $this->req_id = $vals['req_id'];
      }
      if (isset($vals['cast_info'])) {
        $this->cast_info = $vals['cast_info'];
      }
      if (isset($vals['plot'])) {
        $this->plot = $vals['plot'];
      }
      if (isset($vals['thumbnail'])) {
        $this->thumbnail = $vals['thumbnail'];
      }
      if (isset($vals['rating'])) {
        $this->rating = $vals['rating'];
      }
      if (isset($vals['watch_next'])) {
        $this->watch_next = $vals['watch_next'];
      }
      if (isset($vals['reviews'])) {
        $this->reviews = $vals['reviews'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
      if (isset($vals['video'])) {
        $this->video = $vals['video'];
      }
    }
  }

  public function getName() {
    return 'MoviePage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->movie_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->req_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->cast_info = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \NetflixMicroservices\CastInfo();
              $xfer += $elem5->read($input);
              $this->cast_info []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rating);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->watch_next = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->watch_next []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->reviews = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $elem17 = new \NetflixMicroservices\Review();
              $xfer += $elem17->read($input);
              $this->reviews []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->video);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoviePage');
    if ($this->movie_id !== null) {
      $xfer += $output->writeFieldBegin('movie_id', TType::STRING, 1);
      $xfer += $output->writeString($this->movie_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::STRING, 2);
      $xfer += $output->writeString($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->req_id !== null) {
      $xfer += $output->writeFieldBegin('req_id', TType::STRING, 3);
      $xfer += $output->writeString($this->req_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cast_info !== null) {
      if (!is_array($this->cast_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cast_info', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cast_info));
        {
          foreach ($this->cast_info as $iter18)
          {
            $xfer += $iter18->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plot !== null) {
      $xfer += $output->writeFieldBegin('plot', TType::STRING, 5);
      $xfer += $output->writeString($this->plot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnail !== null) {
      $xfer += $output->writeFieldBegin('thumbnail', TType::STRING, 6);
      $xfer += $output->writeString($this->thumbnail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rating !== null) {
      $xfer += $output->writeFieldBegin('rating', TType::STRING, 7);
      $xfer += $output->writeString($this->rating);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watch_next !== null) {
      if (!is_array($this->watch_next)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('watch_next', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->watch_next));
        {
          foreach ($this->watch_next as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviews !== null) {
      if (!is_array($this->reviews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reviews', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->reviews));
        {
          foreach ($this->reviews as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 10);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->video !== null) {
      $xfer += $output->writeFieldBegin('video', TType::STRING, 11);
      $xfer += $output->writeString($this->video);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


