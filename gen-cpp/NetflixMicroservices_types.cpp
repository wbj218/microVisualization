/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NetflixMicroservices_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace NetflixMicroservices {


Review::~Review() throw() {
}


void Review::__set_unique_id(const std::string& val) {
  this->unique_id = val;
}

void Review::__set_user_id(const std::string& val) {
  this->user_id = val;
}

void Review::__set_text(const std::string& val) {
  this->text = val;
}

void Review::__set_rating(const std::string& val) {
  this->rating = val;
}

void Review::__set_movie_id(const std::string& val) {
  this->movie_id = val;
}

void Review::__set_req_id(const std::string& val) {
  this->req_id = val;
}

uint32_t Review::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unique_id);
          this->__isset.unique_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rating);
          this->__isset.rating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->movie_id);
          this->__isset.movie_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->req_id);
          this->__isset.req_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Review::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Review");

  xfer += oprot->writeFieldBegin("unique_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->unique_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rating", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->rating);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("movie_id", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->movie_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_id", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->req_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Review &a, Review &b) {
  using ::std::swap;
  swap(a.unique_id, b.unique_id);
  swap(a.user_id, b.user_id);
  swap(a.text, b.text);
  swap(a.rating, b.rating);
  swap(a.movie_id, b.movie_id);
  swap(a.req_id, b.req_id);
  swap(a.__isset, b.__isset);
}

Review::Review(const Review& other0) {
  unique_id = other0.unique_id;
  user_id = other0.user_id;
  text = other0.text;
  rating = other0.rating;
  movie_id = other0.movie_id;
  req_id = other0.req_id;
  __isset = other0.__isset;
}
Review& Review::operator=(const Review& other1) {
  unique_id = other1.unique_id;
  user_id = other1.user_id;
  text = other1.text;
  rating = other1.rating;
  movie_id = other1.movie_id;
  req_id = other1.req_id;
  __isset = other1.__isset;
  return *this;
}
void Review::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Review(";
  out << "unique_id=" << to_string(unique_id);
  out << ", " << "user_id=" << to_string(user_id);
  out << ", " << "text=" << to_string(text);
  out << ", " << "rating=" << to_string(rating);
  out << ", " << "movie_id=" << to_string(movie_id);
  out << ", " << "req_id=" << to_string(req_id);
  out << ")";
}

} // namespace
