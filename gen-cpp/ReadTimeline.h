/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReadTimeline_H
#define ReadTimeline_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TwitterMicroservices_types.h"

namespace TwitterMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReadTimelineIf {
 public:
  virtual ~ReadTimelineIf() {}
  virtual void ping() = 0;
  virtual void read_timeline(std::vector<std::string> & _return, const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id) = 0;
};

class ReadTimelineIfFactory {
 public:
  typedef ReadTimelineIf Handler;

  virtual ~ReadTimelineIfFactory() {}

  virtual ReadTimelineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReadTimelineIf* /* handler */) = 0;
};

class ReadTimelineIfSingletonFactory : virtual public ReadTimelineIfFactory {
 public:
  ReadTimelineIfSingletonFactory(const boost::shared_ptr<ReadTimelineIf>& iface) : iface_(iface) {}
  virtual ~ReadTimelineIfSingletonFactory() {}

  virtual ReadTimelineIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReadTimelineIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReadTimelineIf> iface_;
};

class ReadTimelineNull : virtual public ReadTimelineIf {
 public:
  virtual ~ReadTimelineNull() {}
  void ping() {
    return;
  }
  void read_timeline(std::vector<std::string> & /* _return */, const std::string& /* user_id */, const int32_t /* start_no */, const int32_t /* n_tweets */, const std::string& /* type */, const std::string& /* req_id */) {
    return;
  }
};


class ReadTimeline_ping_args {
 public:

  ReadTimeline_ping_args(const ReadTimeline_ping_args&);
  ReadTimeline_ping_args& operator=(const ReadTimeline_ping_args&);
  ReadTimeline_ping_args() {
  }

  virtual ~ReadTimeline_ping_args() throw();

  bool operator == (const ReadTimeline_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReadTimeline_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadTimeline_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReadTimeline_ping_pargs {
 public:


  virtual ~ReadTimeline_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReadTimeline_ping_result {
 public:

  ReadTimeline_ping_result(const ReadTimeline_ping_result&);
  ReadTimeline_ping_result& operator=(const ReadTimeline_ping_result&);
  ReadTimeline_ping_result() {
  }

  virtual ~ReadTimeline_ping_result() throw();

  bool operator == (const ReadTimeline_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ReadTimeline_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadTimeline_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReadTimeline_ping_presult {
 public:


  virtual ~ReadTimeline_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ReadTimeline_read_timeline_args__isset {
  _ReadTimeline_read_timeline_args__isset() : user_id(false), start_no(false), n_tweets(false), type(false), req_id(false) {}
  bool user_id :1;
  bool start_no :1;
  bool n_tweets :1;
  bool type :1;
  bool req_id :1;
} _ReadTimeline_read_timeline_args__isset;

class ReadTimeline_read_timeline_args {
 public:

  ReadTimeline_read_timeline_args(const ReadTimeline_read_timeline_args&);
  ReadTimeline_read_timeline_args& operator=(const ReadTimeline_read_timeline_args&);
  ReadTimeline_read_timeline_args() : user_id(), start_no(0), n_tweets(0), type(), req_id() {
  }

  virtual ~ReadTimeline_read_timeline_args() throw();
  std::string user_id;
  int32_t start_no;
  int32_t n_tweets;
  std::string type;
  std::string req_id;

  _ReadTimeline_read_timeline_args__isset __isset;

  void __set_user_id(const std::string& val);

  void __set_start_no(const int32_t val);

  void __set_n_tweets(const int32_t val);

  void __set_type(const std::string& val);

  void __set_req_id(const std::string& val);

  bool operator == (const ReadTimeline_read_timeline_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start_no == rhs.start_no))
      return false;
    if (!(n_tweets == rhs.n_tweets))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    return true;
  }
  bool operator != (const ReadTimeline_read_timeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadTimeline_read_timeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReadTimeline_read_timeline_pargs {
 public:


  virtual ~ReadTimeline_read_timeline_pargs() throw();
  const std::string* user_id;
  const int32_t* start_no;
  const int32_t* n_tweets;
  const std::string* type;
  const std::string* req_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReadTimeline_read_timeline_result__isset {
  _ReadTimeline_read_timeline_result__isset() : success(false) {}
  bool success :1;
} _ReadTimeline_read_timeline_result__isset;

class ReadTimeline_read_timeline_result {
 public:

  ReadTimeline_read_timeline_result(const ReadTimeline_read_timeline_result&);
  ReadTimeline_read_timeline_result& operator=(const ReadTimeline_read_timeline_result&);
  ReadTimeline_read_timeline_result() {
  }

  virtual ~ReadTimeline_read_timeline_result() throw();
  std::vector<std::string>  success;

  _ReadTimeline_read_timeline_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ReadTimeline_read_timeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ReadTimeline_read_timeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadTimeline_read_timeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReadTimeline_read_timeline_presult__isset {
  _ReadTimeline_read_timeline_presult__isset() : success(false) {}
  bool success :1;
} _ReadTimeline_read_timeline_presult__isset;

class ReadTimeline_read_timeline_presult {
 public:


  virtual ~ReadTimeline_read_timeline_presult() throw();
  std::vector<std::string> * success;

  _ReadTimeline_read_timeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReadTimelineClient : virtual public ReadTimelineIf {
 public:
  ReadTimelineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReadTimelineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void read_timeline(std::vector<std::string> & _return, const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id);
  void send_read_timeline(const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id);
  void recv_read_timeline(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReadTimelineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReadTimelineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReadTimelineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_timeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReadTimelineProcessor(boost::shared_ptr<ReadTimelineIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ReadTimelineProcessor::process_ping;
    processMap_["read_timeline"] = &ReadTimelineProcessor::process_read_timeline;
  }

  virtual ~ReadTimelineProcessor() {}
};

class ReadTimelineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReadTimelineProcessorFactory(const ::boost::shared_ptr< ReadTimelineIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReadTimelineIfFactory > handlerFactory_;
};

class ReadTimelineMultiface : virtual public ReadTimelineIf {
 public:
  ReadTimelineMultiface(std::vector<boost::shared_ptr<ReadTimelineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReadTimelineMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReadTimelineIf> > ifaces_;
  ReadTimelineMultiface() {}
  void add(boost::shared_ptr<ReadTimelineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void read_timeline(std::vector<std::string> & _return, const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_timeline(_return, user_id, start_no, n_tweets, type, req_id);
    }
    ifaces_[i]->read_timeline(_return, user_id, start_no, n_tweets, type, req_id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReadTimelineConcurrentClient : virtual public ReadTimelineIf {
 public:
  ReadTimelineConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReadTimelineConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void read_timeline(std::vector<std::string> & _return, const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id);
  int32_t send_read_timeline(const std::string& user_id, const int32_t start_no, const int32_t n_tweets, const std::string& type, const std::string& req_id);
  void recv_read_timeline(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
