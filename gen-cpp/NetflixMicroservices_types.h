/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NetflixMicroservices_TYPES_H
#define NetflixMicroservices_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace NetflixMicroservices {

class Review;

typedef struct _Review__isset {
  _Review__isset() : unique_id(false), user_id(false), text(false), rating(false), movie_id(false), req_id(false) {}
  bool unique_id :1;
  bool user_id :1;
  bool text :1;
  bool rating :1;
  bool movie_id :1;
  bool req_id :1;
} _Review__isset;

class Review : public virtual ::apache::thrift::TBase {
 public:

  Review(const Review&);
  Review& operator=(const Review&);
  Review() : unique_id(), user_id(), text(), rating(), movie_id(), req_id() {
  }

  virtual ~Review() throw();
  std::string unique_id;
  std::string user_id;
  std::string text;
  std::string rating;
  std::string movie_id;
  std::string req_id;

  _Review__isset __isset;

  void __set_unique_id(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_text(const std::string& val);

  void __set_rating(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_req_id(const std::string& val);

  bool operator == (const Review & rhs) const
  {
    if (!(unique_id == rhs.unique_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(rating == rhs.rating))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    return true;
  }
  bool operator != (const Review &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Review & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Review &a, Review &b);

inline std::ostream& operator<<(std::ostream& out, const Review& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
