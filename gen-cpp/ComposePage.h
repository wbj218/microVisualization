/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ComposePage_H
#define ComposePage_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NetflixMicroservices_types.h"

namespace NetflixMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ComposePageIf {
 public:
  virtual ~ComposePageIf() {}
  virtual void ping() = 0;
  virtual void compose_page(MoviePage& _return, const std::string& req_id, const std::string& movie_id, const std::string& user_id) = 0;
  virtual void upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot) = 0;
  virtual void upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating) = 0;
  virtual void upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail) = 0;
  virtual void upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info) = 0;
  virtual void upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo) = 0;
  virtual void upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video) = 0;
  virtual void upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews) = 0;
  virtual void upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next) = 0;
};

class ComposePageIfFactory {
 public:
  typedef ComposePageIf Handler;

  virtual ~ComposePageIfFactory() {}

  virtual ComposePageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ComposePageIf* /* handler */) = 0;
};

class ComposePageIfSingletonFactory : virtual public ComposePageIfFactory {
 public:
  ComposePageIfSingletonFactory(const boost::shared_ptr<ComposePageIf>& iface) : iface_(iface) {}
  virtual ~ComposePageIfSingletonFactory() {}

  virtual ComposePageIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ComposePageIf* /* handler */) {}

 protected:
  boost::shared_ptr<ComposePageIf> iface_;
};

class ComposePageNull : virtual public ComposePageIf {
 public:
  virtual ~ComposePageNull() {}
  void ping() {
    return;
  }
  void compose_page(MoviePage& /* _return */, const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* user_id */) {
    return;
  }
  void upload_plot(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* plot */) {
    return;
  }
  void upload_rating(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* rating */) {
    return;
  }
  void upload_thumbnail(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* thumbnail */) {
    return;
  }
  void upload_cast_info(const std::string& /* req_id */, const std::string& /* movie_id */, const std::vector<CastInfo> & /* cast_info */) {
    return;
  }
  void upload_photo(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* photo */) {
    return;
  }
  void upload_video(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* video */) {
    return;
  }
  void upload_movie_review(const std::string& /* req_id */, const std::string& /* movie_id */, const std::vector<Review> & /* reviews */) {
    return;
  }
  void upload_watch_next(const std::string& /* req_id */, const std::string& /* user_id */, const std::vector<std::string> & /* watch_next */) {
    return;
  }
};


class ComposePage_ping_args {
 public:

  ComposePage_ping_args(const ComposePage_ping_args&);
  ComposePage_ping_args& operator=(const ComposePage_ping_args&);
  ComposePage_ping_args() {
  }

  virtual ~ComposePage_ping_args() throw();

  bool operator == (const ComposePage_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ComposePage_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_ping_pargs {
 public:


  virtual ~ComposePage_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_ping_result {
 public:

  ComposePage_ping_result(const ComposePage_ping_result&);
  ComposePage_ping_result& operator=(const ComposePage_ping_result&);
  ComposePage_ping_result() {
  }

  virtual ~ComposePage_ping_result() throw();

  bool operator == (const ComposePage_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ComposePage_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_ping_presult {
 public:


  virtual ~ComposePage_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposePage_compose_page_args__isset {
  _ComposePage_compose_page_args__isset() : req_id(false), movie_id(false), user_id(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool user_id :1;
} _ComposePage_compose_page_args__isset;

class ComposePage_compose_page_args {
 public:

  ComposePage_compose_page_args(const ComposePage_compose_page_args&);
  ComposePage_compose_page_args& operator=(const ComposePage_compose_page_args&);
  ComposePage_compose_page_args() : req_id(), movie_id(), user_id() {
  }

  virtual ~ComposePage_compose_page_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string user_id;

  _ComposePage_compose_page_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_user_id(const std::string& val);

  bool operator == (const ComposePage_compose_page_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const ComposePage_compose_page_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_compose_page_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_compose_page_pargs {
 public:


  virtual ~ComposePage_compose_page_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_compose_page_result__isset {
  _ComposePage_compose_page_result__isset() : success(false) {}
  bool success :1;
} _ComposePage_compose_page_result__isset;

class ComposePage_compose_page_result {
 public:

  ComposePage_compose_page_result(const ComposePage_compose_page_result&);
  ComposePage_compose_page_result& operator=(const ComposePage_compose_page_result&);
  ComposePage_compose_page_result() {
  }

  virtual ~ComposePage_compose_page_result() throw();
  MoviePage success;

  _ComposePage_compose_page_result__isset __isset;

  void __set_success(const MoviePage& val);

  bool operator == (const ComposePage_compose_page_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ComposePage_compose_page_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_compose_page_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_compose_page_presult__isset {
  _ComposePage_compose_page_presult__isset() : success(false) {}
  bool success :1;
} _ComposePage_compose_page_presult__isset;

class ComposePage_compose_page_presult {
 public:


  virtual ~ComposePage_compose_page_presult() throw();
  MoviePage* success;

  _ComposePage_compose_page_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ComposePage_upload_plot_args__isset {
  _ComposePage_upload_plot_args__isset() : req_id(false), movie_id(false), plot(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool plot :1;
} _ComposePage_upload_plot_args__isset;

class ComposePage_upload_plot_args {
 public:

  ComposePage_upload_plot_args(const ComposePage_upload_plot_args&);
  ComposePage_upload_plot_args& operator=(const ComposePage_upload_plot_args&);
  ComposePage_upload_plot_args() : req_id(), movie_id(), plot() {
  }

  virtual ~ComposePage_upload_plot_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string plot;

  _ComposePage_upload_plot_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_plot(const std::string& val);

  bool operator == (const ComposePage_upload_plot_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(plot == rhs.plot))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_plot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_plot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_plot_pargs {
 public:


  virtual ~ComposePage_upload_plot_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* plot;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_rating_args__isset {
  _ComposePage_upload_rating_args__isset() : req_id(false), movie_id(false), rating(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool rating :1;
} _ComposePage_upload_rating_args__isset;

class ComposePage_upload_rating_args {
 public:

  ComposePage_upload_rating_args(const ComposePage_upload_rating_args&);
  ComposePage_upload_rating_args& operator=(const ComposePage_upload_rating_args&);
  ComposePage_upload_rating_args() : req_id(), movie_id(), rating() {
  }

  virtual ~ComposePage_upload_rating_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string rating;

  _ComposePage_upload_rating_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_rating(const std::string& val);

  bool operator == (const ComposePage_upload_rating_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(rating == rhs.rating))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_rating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_rating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_rating_pargs {
 public:


  virtual ~ComposePage_upload_rating_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* rating;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_thumbnail_args__isset {
  _ComposePage_upload_thumbnail_args__isset() : req_id(false), movie_id(false), thumbnail(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool thumbnail :1;
} _ComposePage_upload_thumbnail_args__isset;

class ComposePage_upload_thumbnail_args {
 public:

  ComposePage_upload_thumbnail_args(const ComposePage_upload_thumbnail_args&);
  ComposePage_upload_thumbnail_args& operator=(const ComposePage_upload_thumbnail_args&);
  ComposePage_upload_thumbnail_args() : req_id(), movie_id(), thumbnail() {
  }

  virtual ~ComposePage_upload_thumbnail_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string thumbnail;

  _ComposePage_upload_thumbnail_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_thumbnail(const std::string& val);

  bool operator == (const ComposePage_upload_thumbnail_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(thumbnail == rhs.thumbnail))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_thumbnail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_thumbnail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_thumbnail_pargs {
 public:


  virtual ~ComposePage_upload_thumbnail_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* thumbnail;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_cast_info_args__isset {
  _ComposePage_upload_cast_info_args__isset() : req_id(false), movie_id(false), cast_info(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool cast_info :1;
} _ComposePage_upload_cast_info_args__isset;

class ComposePage_upload_cast_info_args {
 public:

  ComposePage_upload_cast_info_args(const ComposePage_upload_cast_info_args&);
  ComposePage_upload_cast_info_args& operator=(const ComposePage_upload_cast_info_args&);
  ComposePage_upload_cast_info_args() : req_id(), movie_id() {
  }

  virtual ~ComposePage_upload_cast_info_args() throw();
  std::string req_id;
  std::string movie_id;
  std::vector<CastInfo>  cast_info;

  _ComposePage_upload_cast_info_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_cast_info(const std::vector<CastInfo> & val);

  bool operator == (const ComposePage_upload_cast_info_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(cast_info == rhs.cast_info))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_cast_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_cast_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_cast_info_pargs {
 public:


  virtual ~ComposePage_upload_cast_info_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::vector<CastInfo> * cast_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_photo_args__isset {
  _ComposePage_upload_photo_args__isset() : req_id(false), movie_id(false), photo(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool photo :1;
} _ComposePage_upload_photo_args__isset;

class ComposePage_upload_photo_args {
 public:

  ComposePage_upload_photo_args(const ComposePage_upload_photo_args&);
  ComposePage_upload_photo_args& operator=(const ComposePage_upload_photo_args&);
  ComposePage_upload_photo_args() : req_id(), movie_id(), photo() {
  }

  virtual ~ComposePage_upload_photo_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string photo;

  _ComposePage_upload_photo_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_photo(const std::string& val);

  bool operator == (const ComposePage_upload_photo_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(photo == rhs.photo))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_photo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_photo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_photo_pargs {
 public:


  virtual ~ComposePage_upload_photo_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* photo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_video_args__isset {
  _ComposePage_upload_video_args__isset() : req_id(false), movie_id(false), video(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool video :1;
} _ComposePage_upload_video_args__isset;

class ComposePage_upload_video_args {
 public:

  ComposePage_upload_video_args(const ComposePage_upload_video_args&);
  ComposePage_upload_video_args& operator=(const ComposePage_upload_video_args&);
  ComposePage_upload_video_args() : req_id(), movie_id(), video() {
  }

  virtual ~ComposePage_upload_video_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string video;

  _ComposePage_upload_video_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_video(const std::string& val);

  bool operator == (const ComposePage_upload_video_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(video == rhs.video))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_video_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_video_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_video_pargs {
 public:


  virtual ~ComposePage_upload_video_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* video;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_movie_review_args__isset {
  _ComposePage_upload_movie_review_args__isset() : req_id(false), movie_id(false), reviews(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool reviews :1;
} _ComposePage_upload_movie_review_args__isset;

class ComposePage_upload_movie_review_args {
 public:

  ComposePage_upload_movie_review_args(const ComposePage_upload_movie_review_args&);
  ComposePage_upload_movie_review_args& operator=(const ComposePage_upload_movie_review_args&);
  ComposePage_upload_movie_review_args() : req_id(), movie_id() {
  }

  virtual ~ComposePage_upload_movie_review_args() throw();
  std::string req_id;
  std::string movie_id;
  std::vector<Review>  reviews;

  _ComposePage_upload_movie_review_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_reviews(const std::vector<Review> & val);

  bool operator == (const ComposePage_upload_movie_review_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(reviews == rhs.reviews))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_movie_review_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_movie_review_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_movie_review_pargs {
 public:


  virtual ~ComposePage_upload_movie_review_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::vector<Review> * reviews;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ComposePage_upload_watch_next_args__isset {
  _ComposePage_upload_watch_next_args__isset() : req_id(false), user_id(false), watch_next(false) {}
  bool req_id :1;
  bool user_id :1;
  bool watch_next :1;
} _ComposePage_upload_watch_next_args__isset;

class ComposePage_upload_watch_next_args {
 public:

  ComposePage_upload_watch_next_args(const ComposePage_upload_watch_next_args&);
  ComposePage_upload_watch_next_args& operator=(const ComposePage_upload_watch_next_args&);
  ComposePage_upload_watch_next_args() : req_id(), user_id() {
  }

  virtual ~ComposePage_upload_watch_next_args() throw();
  std::string req_id;
  std::string user_id;
  std::vector<std::string>  watch_next;

  _ComposePage_upload_watch_next_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_watch_next(const std::vector<std::string> & val);

  bool operator == (const ComposePage_upload_watch_next_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(watch_next == rhs.watch_next))
      return false;
    return true;
  }
  bool operator != (const ComposePage_upload_watch_next_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposePage_upload_watch_next_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ComposePage_upload_watch_next_pargs {
 public:


  virtual ~ComposePage_upload_watch_next_pargs() throw();
  const std::string* req_id;
  const std::string* user_id;
  const std::vector<std::string> * watch_next;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ComposePageClient : virtual public ComposePageIf {
 public:
  ComposePageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComposePageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void compose_page(MoviePage& _return, const std::string& req_id, const std::string& movie_id, const std::string& user_id);
  void send_compose_page(const std::string& req_id, const std::string& movie_id, const std::string& user_id);
  void recv_compose_page(MoviePage& _return);
  void upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot);
  void send_upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot);
  void upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating);
  void send_upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating);
  void upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail);
  void send_upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail);
  void upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info);
  void send_upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info);
  void upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo);
  void send_upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo);
  void upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video);
  void send_upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video);
  void upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews);
  void send_upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews);
  void upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next);
  void send_upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ComposePageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ComposePageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ComposePageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compose_page(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_plot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_rating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_thumbnail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_cast_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_photo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_video(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_movie_review(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload_watch_next(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ComposePageProcessor(boost::shared_ptr<ComposePageIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ComposePageProcessor::process_ping;
    processMap_["compose_page"] = &ComposePageProcessor::process_compose_page;
    processMap_["upload_plot"] = &ComposePageProcessor::process_upload_plot;
    processMap_["upload_rating"] = &ComposePageProcessor::process_upload_rating;
    processMap_["upload_thumbnail"] = &ComposePageProcessor::process_upload_thumbnail;
    processMap_["upload_cast_info"] = &ComposePageProcessor::process_upload_cast_info;
    processMap_["upload_photo"] = &ComposePageProcessor::process_upload_photo;
    processMap_["upload_video"] = &ComposePageProcessor::process_upload_video;
    processMap_["upload_movie_review"] = &ComposePageProcessor::process_upload_movie_review;
    processMap_["upload_watch_next"] = &ComposePageProcessor::process_upload_watch_next;
  }

  virtual ~ComposePageProcessor() {}
};

class ComposePageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ComposePageProcessorFactory(const ::boost::shared_ptr< ComposePageIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ComposePageIfFactory > handlerFactory_;
};

class ComposePageMultiface : virtual public ComposePageIf {
 public:
  ComposePageMultiface(std::vector<boost::shared_ptr<ComposePageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ComposePageMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ComposePageIf> > ifaces_;
  ComposePageMultiface() {}
  void add(boost::shared_ptr<ComposePageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void compose_page(MoviePage& _return, const std::string& req_id, const std::string& movie_id, const std::string& user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compose_page(_return, req_id, movie_id, user_id);
    }
    ifaces_[i]->compose_page(_return, req_id, movie_id, user_id);
    return;
  }

  void upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_plot(req_id, movie_id, plot);
    }
    ifaces_[i]->upload_plot(req_id, movie_id, plot);
  }

  void upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_rating(req_id, movie_id, rating);
    }
    ifaces_[i]->upload_rating(req_id, movie_id, rating);
  }

  void upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_thumbnail(req_id, movie_id, thumbnail);
    }
    ifaces_[i]->upload_thumbnail(req_id, movie_id, thumbnail);
  }

  void upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_cast_info(req_id, movie_id, cast_info);
    }
    ifaces_[i]->upload_cast_info(req_id, movie_id, cast_info);
  }

  void upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_photo(req_id, movie_id, photo);
    }
    ifaces_[i]->upload_photo(req_id, movie_id, photo);
  }

  void upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_video(req_id, movie_id, video);
    }
    ifaces_[i]->upload_video(req_id, movie_id, video);
  }

  void upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_movie_review(req_id, movie_id, reviews);
    }
    ifaces_[i]->upload_movie_review(req_id, movie_id, reviews);
  }

  void upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload_watch_next(req_id, user_id, watch_next);
    }
    ifaces_[i]->upload_watch_next(req_id, user_id, watch_next);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ComposePageConcurrentClient : virtual public ComposePageIf {
 public:
  ComposePageConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ComposePageConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void compose_page(MoviePage& _return, const std::string& req_id, const std::string& movie_id, const std::string& user_id);
  int32_t send_compose_page(const std::string& req_id, const std::string& movie_id, const std::string& user_id);
  void recv_compose_page(MoviePage& _return, const int32_t seqid);
  void upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot);
  void send_upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot);
  void upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating);
  void send_upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating);
  void upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail);
  void send_upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail);
  void upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info);
  void send_upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info);
  void upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo);
  void send_upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo);
  void upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video);
  void send_upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video);
  void upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews);
  void send_upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews);
  void upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next);
  void send_upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
