/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WriteMovieDB_H
#define WriteMovieDB_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NetflixMicroservices_types.h"

namespace NetflixMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class WriteMovieDBIf {
 public:
  virtual ~WriteMovieDBIf() {}
  virtual void ping() = 0;
  virtual void write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating) = 0;
};

class WriteMovieDBIfFactory {
 public:
  typedef WriteMovieDBIf Handler;

  virtual ~WriteMovieDBIfFactory() {}

  virtual WriteMovieDBIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(WriteMovieDBIf* /* handler */) = 0;
};

class WriteMovieDBIfSingletonFactory : virtual public WriteMovieDBIfFactory {
 public:
  WriteMovieDBIfSingletonFactory(const boost::shared_ptr<WriteMovieDBIf>& iface) : iface_(iface) {}
  virtual ~WriteMovieDBIfSingletonFactory() {}

  virtual WriteMovieDBIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(WriteMovieDBIf* /* handler */) {}

 protected:
  boost::shared_ptr<WriteMovieDBIf> iface_;
};

class WriteMovieDBNull : virtual public WriteMovieDBIf {
 public:
  virtual ~WriteMovieDBNull() {}
  void ping() {
    return;
  }
  void write_movie_db(const std::string& /* req_id */, const std::string& /* movie_id */, const std::string& /* user_id */, const std::string& /* unique_id */, const std::string& /* rating */) {
    return;
  }
};


class WriteMovieDB_ping_args {
 public:

  WriteMovieDB_ping_args(const WriteMovieDB_ping_args&);
  WriteMovieDB_ping_args& operator=(const WriteMovieDB_ping_args&);
  WriteMovieDB_ping_args() {
  }

  virtual ~WriteMovieDB_ping_args() throw();

  bool operator == (const WriteMovieDB_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WriteMovieDB_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WriteMovieDB_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WriteMovieDB_ping_pargs {
 public:


  virtual ~WriteMovieDB_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WriteMovieDB_ping_result {
 public:

  WriteMovieDB_ping_result(const WriteMovieDB_ping_result&);
  WriteMovieDB_ping_result& operator=(const WriteMovieDB_ping_result&);
  WriteMovieDB_ping_result() {
  }

  virtual ~WriteMovieDB_ping_result() throw();

  bool operator == (const WriteMovieDB_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WriteMovieDB_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WriteMovieDB_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WriteMovieDB_ping_presult {
 public:


  virtual ~WriteMovieDB_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WriteMovieDB_write_movie_db_args__isset {
  _WriteMovieDB_write_movie_db_args__isset() : req_id(false), movie_id(false), user_id(false), unique_id(false), rating(false) {}
  bool req_id :1;
  bool movie_id :1;
  bool user_id :1;
  bool unique_id :1;
  bool rating :1;
} _WriteMovieDB_write_movie_db_args__isset;

class WriteMovieDB_write_movie_db_args {
 public:

  WriteMovieDB_write_movie_db_args(const WriteMovieDB_write_movie_db_args&);
  WriteMovieDB_write_movie_db_args& operator=(const WriteMovieDB_write_movie_db_args&);
  WriteMovieDB_write_movie_db_args() : req_id(), movie_id(), user_id(), unique_id(), rating() {
  }

  virtual ~WriteMovieDB_write_movie_db_args() throw();
  std::string req_id;
  std::string movie_id;
  std::string user_id;
  std::string unique_id;
  std::string rating;

  _WriteMovieDB_write_movie_db_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_unique_id(const std::string& val);

  void __set_rating(const std::string& val);

  bool operator == (const WriteMovieDB_write_movie_db_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(unique_id == rhs.unique_id))
      return false;
    if (!(rating == rhs.rating))
      return false;
    return true;
  }
  bool operator != (const WriteMovieDB_write_movie_db_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WriteMovieDB_write_movie_db_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WriteMovieDB_write_movie_db_pargs {
 public:


  virtual ~WriteMovieDB_write_movie_db_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;
  const std::string* user_id;
  const std::string* unique_id;
  const std::string* rating;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class WriteMovieDBClient : virtual public WriteMovieDBIf {
 public:
  WriteMovieDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WriteMovieDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating);
  void send_write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WriteMovieDBProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<WriteMovieDBIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (WriteMovieDBProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_movie_db(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WriteMovieDBProcessor(boost::shared_ptr<WriteMovieDBIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &WriteMovieDBProcessor::process_ping;
    processMap_["write_movie_db"] = &WriteMovieDBProcessor::process_write_movie_db;
  }

  virtual ~WriteMovieDBProcessor() {}
};

class WriteMovieDBProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  WriteMovieDBProcessorFactory(const ::boost::shared_ptr< WriteMovieDBIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< WriteMovieDBIfFactory > handlerFactory_;
};

class WriteMovieDBMultiface : virtual public WriteMovieDBIf {
 public:
  WriteMovieDBMultiface(std::vector<boost::shared_ptr<WriteMovieDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WriteMovieDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WriteMovieDBIf> > ifaces_;
  WriteMovieDBMultiface() {}
  void add(boost::shared_ptr<WriteMovieDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_movie_db(req_id, movie_id, user_id, unique_id, rating);
    }
    ifaces_[i]->write_movie_db(req_id, movie_id, user_id, unique_id, rating);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class WriteMovieDBConcurrentClient : virtual public WriteMovieDBIf {
 public:
  WriteMovieDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  WriteMovieDBConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating);
  void send_write_movie_db(const std::string& req_id, const std::string& movie_id, const std::string& user_id, const std::string& unique_id, const std::string& rating);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
