// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ComposePage.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::NetflixMicroservices;

class ComposePageHandler : virtual public ComposePageIf {
 public:
  ComposePageHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void compose_page(MoviePage& _return, const std::string& req_id, const std::string& movie_id, const std::string& user_id) {
    // Your implementation goes here
    printf("compose_page\n");
  }

  void upload_plot(const std::string& req_id, const std::string& movie_id, const std::string& plot) {
    // Your implementation goes here
    printf("upload_plot\n");
  }

  void upload_rating(const std::string& req_id, const std::string& movie_id, const std::string& rating) {
    // Your implementation goes here
    printf("upload_rating\n");
  }

  void upload_thumbnail(const std::string& req_id, const std::string& movie_id, const std::string& thumbnail) {
    // Your implementation goes here
    printf("upload_thumbnail\n");
  }

  void upload_cast_info(const std::string& req_id, const std::string& movie_id, const std::vector<CastInfo> & cast_info) {
    // Your implementation goes here
    printf("upload_cast_info\n");
  }

  void upload_photo(const std::string& req_id, const std::string& movie_id, const std::string& photo) {
    // Your implementation goes here
    printf("upload_photo\n");
  }

  void upload_video(const std::string& req_id, const std::string& movie_id, const std::string& video) {
    // Your implementation goes here
    printf("upload_video\n");
  }

  void upload_movie_review(const std::string& req_id, const std::string& movie_id, const std::vector<Review> & reviews) {
    // Your implementation goes here
    printf("upload_movie_review\n");
  }

  void upload_watch_next(const std::string& req_id, const std::string& user_id, const std::vector<std::string> & watch_next) {
    // Your implementation goes here
    printf("upload_watch_next\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ComposePageHandler> handler(new ComposePageHandler());
  shared_ptr<TProcessor> processor(new ComposePageProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

