/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MongoDMStorage_H
#define MongoDMStorage_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TwitterMicroservices_types.h"

namespace TwitterMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MongoDMStorageIf {
 public:
  virtual ~MongoDMStorageIf() {}
  virtual void ping() = 0;
  virtual void store_dm(const Tweet& tweet, const std::string& req_id) = 0;
};

class MongoDMStorageIfFactory {
 public:
  typedef MongoDMStorageIf Handler;

  virtual ~MongoDMStorageIfFactory() {}

  virtual MongoDMStorageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MongoDMStorageIf* /* handler */) = 0;
};

class MongoDMStorageIfSingletonFactory : virtual public MongoDMStorageIfFactory {
 public:
  MongoDMStorageIfSingletonFactory(const boost::shared_ptr<MongoDMStorageIf>& iface) : iface_(iface) {}
  virtual ~MongoDMStorageIfSingletonFactory() {}

  virtual MongoDMStorageIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MongoDMStorageIf* /* handler */) {}

 protected:
  boost::shared_ptr<MongoDMStorageIf> iface_;
};

class MongoDMStorageNull : virtual public MongoDMStorageIf {
 public:
  virtual ~MongoDMStorageNull() {}
  void ping() {
    return;
  }
  void store_dm(const Tweet& /* tweet */, const std::string& /* req_id */) {
    return;
  }
};


class MongoDMStorage_ping_args {
 public:

  MongoDMStorage_ping_args(const MongoDMStorage_ping_args&);
  MongoDMStorage_ping_args& operator=(const MongoDMStorage_ping_args&);
  MongoDMStorage_ping_args() {
  }

  virtual ~MongoDMStorage_ping_args() throw();

  bool operator == (const MongoDMStorage_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MongoDMStorage_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MongoDMStorage_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MongoDMStorage_ping_pargs {
 public:


  virtual ~MongoDMStorage_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MongoDMStorage_ping_result {
 public:

  MongoDMStorage_ping_result(const MongoDMStorage_ping_result&);
  MongoDMStorage_ping_result& operator=(const MongoDMStorage_ping_result&);
  MongoDMStorage_ping_result() {
  }

  virtual ~MongoDMStorage_ping_result() throw();

  bool operator == (const MongoDMStorage_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MongoDMStorage_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MongoDMStorage_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MongoDMStorage_ping_presult {
 public:


  virtual ~MongoDMStorage_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MongoDMStorage_store_dm_args__isset {
  _MongoDMStorage_store_dm_args__isset() : tweet(false), req_id(false) {}
  bool tweet :1;
  bool req_id :1;
} _MongoDMStorage_store_dm_args__isset;

class MongoDMStorage_store_dm_args {
 public:

  MongoDMStorage_store_dm_args(const MongoDMStorage_store_dm_args&);
  MongoDMStorage_store_dm_args& operator=(const MongoDMStorage_store_dm_args&);
  MongoDMStorage_store_dm_args() : req_id() {
  }

  virtual ~MongoDMStorage_store_dm_args() throw();
  Tweet tweet;
  std::string req_id;

  _MongoDMStorage_store_dm_args__isset __isset;

  void __set_tweet(const Tweet& val);

  void __set_req_id(const std::string& val);

  bool operator == (const MongoDMStorage_store_dm_args & rhs) const
  {
    if (!(tweet == rhs.tweet))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    return true;
  }
  bool operator != (const MongoDMStorage_store_dm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MongoDMStorage_store_dm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MongoDMStorage_store_dm_pargs {
 public:


  virtual ~MongoDMStorage_store_dm_pargs() throw();
  const Tweet* tweet;
  const std::string* req_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class MongoDMStorageClient : virtual public MongoDMStorageIf {
 public:
  MongoDMStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MongoDMStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void store_dm(const Tweet& tweet, const std::string& req_id);
  void send_store_dm(const Tweet& tweet, const std::string& req_id);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MongoDMStorageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MongoDMStorageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MongoDMStorageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_store_dm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MongoDMStorageProcessor(boost::shared_ptr<MongoDMStorageIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MongoDMStorageProcessor::process_ping;
    processMap_["store_dm"] = &MongoDMStorageProcessor::process_store_dm;
  }

  virtual ~MongoDMStorageProcessor() {}
};

class MongoDMStorageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MongoDMStorageProcessorFactory(const ::boost::shared_ptr< MongoDMStorageIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MongoDMStorageIfFactory > handlerFactory_;
};

class MongoDMStorageMultiface : virtual public MongoDMStorageIf {
 public:
  MongoDMStorageMultiface(std::vector<boost::shared_ptr<MongoDMStorageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MongoDMStorageMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MongoDMStorageIf> > ifaces_;
  MongoDMStorageMultiface() {}
  void add(boost::shared_ptr<MongoDMStorageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void store_dm(const Tweet& tweet, const std::string& req_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->store_dm(tweet, req_id);
    }
    ifaces_[i]->store_dm(tweet, req_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MongoDMStorageConcurrentClient : virtual public MongoDMStorageIf {
 public:
  MongoDMStorageConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MongoDMStorageConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void store_dm(const Tweet& tweet, const std::string& req_id);
  void send_store_dm(const Tweet& tweet, const std::string& req_id);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
