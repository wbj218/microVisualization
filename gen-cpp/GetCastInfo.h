/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GetCastInfo_H
#define GetCastInfo_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NetflixMicroservices_types.h"

namespace NetflixMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GetCastInfoIf {
 public:
  virtual ~GetCastInfoIf() {}
  virtual void ping() = 0;
  virtual void get_cast_info(std::string& _return, const std::string& req_id, const std::string& movie_id) = 0;
};

class GetCastInfoIfFactory {
 public:
  typedef GetCastInfoIf Handler;

  virtual ~GetCastInfoIfFactory() {}

  virtual GetCastInfoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GetCastInfoIf* /* handler */) = 0;
};

class GetCastInfoIfSingletonFactory : virtual public GetCastInfoIfFactory {
 public:
  GetCastInfoIfSingletonFactory(const boost::shared_ptr<GetCastInfoIf>& iface) : iface_(iface) {}
  virtual ~GetCastInfoIfSingletonFactory() {}

  virtual GetCastInfoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GetCastInfoIf* /* handler */) {}

 protected:
  boost::shared_ptr<GetCastInfoIf> iface_;
};

class GetCastInfoNull : virtual public GetCastInfoIf {
 public:
  virtual ~GetCastInfoNull() {}
  void ping() {
    return;
  }
  void get_cast_info(std::string& /* _return */, const std::string& /* req_id */, const std::string& /* movie_id */) {
    return;
  }
};


class GetCastInfo_ping_args {
 public:

  GetCastInfo_ping_args(const GetCastInfo_ping_args&);
  GetCastInfo_ping_args& operator=(const GetCastInfo_ping_args&);
  GetCastInfo_ping_args() {
  }

  virtual ~GetCastInfo_ping_args() throw();

  bool operator == (const GetCastInfo_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GetCastInfo_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCastInfo_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetCastInfo_ping_pargs {
 public:


  virtual ~GetCastInfo_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetCastInfo_ping_result {
 public:

  GetCastInfo_ping_result(const GetCastInfo_ping_result&);
  GetCastInfo_ping_result& operator=(const GetCastInfo_ping_result&);
  GetCastInfo_ping_result() {
  }

  virtual ~GetCastInfo_ping_result() throw();

  bool operator == (const GetCastInfo_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GetCastInfo_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCastInfo_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetCastInfo_ping_presult {
 public:


  virtual ~GetCastInfo_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GetCastInfo_get_cast_info_args__isset {
  _GetCastInfo_get_cast_info_args__isset() : req_id(false), movie_id(false) {}
  bool req_id :1;
  bool movie_id :1;
} _GetCastInfo_get_cast_info_args__isset;

class GetCastInfo_get_cast_info_args {
 public:

  GetCastInfo_get_cast_info_args(const GetCastInfo_get_cast_info_args&);
  GetCastInfo_get_cast_info_args& operator=(const GetCastInfo_get_cast_info_args&);
  GetCastInfo_get_cast_info_args() : req_id(), movie_id() {
  }

  virtual ~GetCastInfo_get_cast_info_args() throw();
  std::string req_id;
  std::string movie_id;

  _GetCastInfo_get_cast_info_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  bool operator == (const GetCastInfo_get_cast_info_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    return true;
  }
  bool operator != (const GetCastInfo_get_cast_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCastInfo_get_cast_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetCastInfo_get_cast_info_pargs {
 public:


  virtual ~GetCastInfo_get_cast_info_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetCastInfo_get_cast_info_result__isset {
  _GetCastInfo_get_cast_info_result__isset() : success(false) {}
  bool success :1;
} _GetCastInfo_get_cast_info_result__isset;

class GetCastInfo_get_cast_info_result {
 public:

  GetCastInfo_get_cast_info_result(const GetCastInfo_get_cast_info_result&);
  GetCastInfo_get_cast_info_result& operator=(const GetCastInfo_get_cast_info_result&);
  GetCastInfo_get_cast_info_result() : success() {
  }

  virtual ~GetCastInfo_get_cast_info_result() throw();
  std::string success;

  _GetCastInfo_get_cast_info_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GetCastInfo_get_cast_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GetCastInfo_get_cast_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetCastInfo_get_cast_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetCastInfo_get_cast_info_presult__isset {
  _GetCastInfo_get_cast_info_presult__isset() : success(false) {}
  bool success :1;
} _GetCastInfo_get_cast_info_presult__isset;

class GetCastInfo_get_cast_info_presult {
 public:


  virtual ~GetCastInfo_get_cast_info_presult() throw();
  std::string* success;

  _GetCastInfo_get_cast_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GetCastInfoClient : virtual public GetCastInfoIf {
 public:
  GetCastInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GetCastInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void get_cast_info(std::string& _return, const std::string& req_id, const std::string& movie_id);
  void send_get_cast_info(const std::string& req_id, const std::string& movie_id);
  void recv_get_cast_info(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GetCastInfoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GetCastInfoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GetCastInfoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_cast_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GetCastInfoProcessor(boost::shared_ptr<GetCastInfoIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &GetCastInfoProcessor::process_ping;
    processMap_["get_cast_info"] = &GetCastInfoProcessor::process_get_cast_info;
  }

  virtual ~GetCastInfoProcessor() {}
};

class GetCastInfoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GetCastInfoProcessorFactory(const ::boost::shared_ptr< GetCastInfoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GetCastInfoIfFactory > handlerFactory_;
};

class GetCastInfoMultiface : virtual public GetCastInfoIf {
 public:
  GetCastInfoMultiface(std::vector<boost::shared_ptr<GetCastInfoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GetCastInfoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GetCastInfoIf> > ifaces_;
  GetCastInfoMultiface() {}
  void add(boost::shared_ptr<GetCastInfoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void get_cast_info(std::string& _return, const std::string& req_id, const std::string& movie_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_cast_info(_return, req_id, movie_id);
    }
    ifaces_[i]->get_cast_info(_return, req_id, movie_id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GetCastInfoConcurrentClient : virtual public GetCastInfoIf {
 public:
  GetCastInfoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GetCastInfoConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void get_cast_info(std::string& _return, const std::string& req_id, const std::string& movie_id);
  int32_t send_get_cast_info(const std::string& req_id, const std::string& movie_id);
  void recv_get_cast_info(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
