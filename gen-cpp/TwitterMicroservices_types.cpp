/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TwitterMicroservices_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TwitterMicroservices {


Tweet::~Tweet() throw() {
}


void Tweet::__set_unique_id(const std::string& val) {
  this->unique_id = val;
}

void Tweet::__set_user_id(const std::string& val) {
  this->user_id = val;
}

void Tweet::__set_text(const std::string& val) {
  this->text = val;
}

void Tweet::__set_image(const std::string& val) {
  this->image = val;
}

void Tweet::__set_video(const std::string& val) {
  this->video = val;
}

void Tweet::__set_tags(const std::string& val) {
  this->tags = val;
}

void Tweet::__set_urls(const std::string& val) {
  this->urls = val;
}

void Tweet::__set_tweet_type(const std::string& val) {
  this->tweet_type = val;
}

void Tweet::__set_recipient_id(const std::string& val) {
  this->recipient_id = val;
}

void Tweet::__set_orig_tweet_id(const std::string& val) {
  this->orig_tweet_id = val;
}

void Tweet::__set_retweet_text(const std::string& val) {
  this->retweet_text = val;
}

void Tweet::__set_retweet_tags(const std::string& val) {
  this->retweet_tags = val;
}

void Tweet::__set_retweet_urls(const std::string& val) {
  this->retweet_urls = val;
}

void Tweet::__set_orig_user_id(const std::string& val) {
  this->orig_user_id = val;
}

void Tweet::__set_req_id(const std::string& val) {
  this->req_id = val;
}

uint32_t Tweet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unique_id);
          this->__isset.unique_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->image);
          this->__isset.image = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tags);
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->urls);
          this->__isset.urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tweet_type);
          this->__isset.tweet_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->recipient_id);
          this->__isset.recipient_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orig_tweet_id);
          this->__isset.orig_tweet_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->retweet_text);
          this->__isset.retweet_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->retweet_tags);
          this->__isset.retweet_tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->retweet_urls);
          this->__isset.retweet_urls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orig_user_id);
          this->__isset.orig_user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->req_id);
          this->__isset.req_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tweet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tweet");

  xfer += oprot->writeFieldBegin("unique_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->unique_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("image", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->image);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->video);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->tags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("urls", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->urls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tweet_type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->tweet_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recipient_id", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->recipient_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orig_tweet_id", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->orig_tweet_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retweet_text", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->retweet_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retweet_tags", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->retweet_tags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("retweet_urls", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->retweet_urls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orig_user_id", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->orig_user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_id", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->req_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tweet &a, Tweet &b) {
  using ::std::swap;
  swap(a.unique_id, b.unique_id);
  swap(a.user_id, b.user_id);
  swap(a.text, b.text);
  swap(a.image, b.image);
  swap(a.video, b.video);
  swap(a.tags, b.tags);
  swap(a.urls, b.urls);
  swap(a.tweet_type, b.tweet_type);
  swap(a.recipient_id, b.recipient_id);
  swap(a.orig_tweet_id, b.orig_tweet_id);
  swap(a.retweet_text, b.retweet_text);
  swap(a.retweet_tags, b.retweet_tags);
  swap(a.retweet_urls, b.retweet_urls);
  swap(a.orig_user_id, b.orig_user_id);
  swap(a.req_id, b.req_id);
  swap(a.__isset, b.__isset);
}

Tweet::Tweet(const Tweet& other0) {
  unique_id = other0.unique_id;
  user_id = other0.user_id;
  text = other0.text;
  image = other0.image;
  video = other0.video;
  tags = other0.tags;
  urls = other0.urls;
  tweet_type = other0.tweet_type;
  recipient_id = other0.recipient_id;
  orig_tweet_id = other0.orig_tweet_id;
  retweet_text = other0.retweet_text;
  retweet_tags = other0.retweet_tags;
  retweet_urls = other0.retweet_urls;
  orig_user_id = other0.orig_user_id;
  req_id = other0.req_id;
  __isset = other0.__isset;
}
Tweet& Tweet::operator=(const Tweet& other1) {
  unique_id = other1.unique_id;
  user_id = other1.user_id;
  text = other1.text;
  image = other1.image;
  video = other1.video;
  tags = other1.tags;
  urls = other1.urls;
  tweet_type = other1.tweet_type;
  recipient_id = other1.recipient_id;
  orig_tweet_id = other1.orig_tweet_id;
  retweet_text = other1.retweet_text;
  retweet_tags = other1.retweet_tags;
  retweet_urls = other1.retweet_urls;
  orig_user_id = other1.orig_user_id;
  req_id = other1.req_id;
  __isset = other1.__isset;
  return *this;
}
void Tweet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tweet(";
  out << "unique_id=" << to_string(unique_id);
  out << ", " << "user_id=" << to_string(user_id);
  out << ", " << "text=" << to_string(text);
  out << ", " << "image=" << to_string(image);
  out << ", " << "video=" << to_string(video);
  out << ", " << "tags=" << to_string(tags);
  out << ", " << "urls=" << to_string(urls);
  out << ", " << "tweet_type=" << to_string(tweet_type);
  out << ", " << "recipient_id=" << to_string(recipient_id);
  out << ", " << "orig_tweet_id=" << to_string(orig_tweet_id);
  out << ", " << "retweet_text=" << to_string(retweet_text);
  out << ", " << "retweet_tags=" << to_string(retweet_tags);
  out << ", " << "retweet_urls=" << to_string(retweet_urls);
  out << ", " << "orig_user_id=" << to_string(orig_user_id);
  out << ", " << "req_id=" << to_string(req_id);
  out << ")";
}

} // namespace
