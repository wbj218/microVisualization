/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TwitterMicroservices_TYPES_H
#define TwitterMicroservices_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace TwitterMicroservices {

class Tweet;

typedef struct _Tweet__isset {
  _Tweet__isset() : unique_id(false), user_id(false), text(false), image(false), video(false), tags(false), urls(false), tweet_type(false), recipient_id(false), orig_tweet_id(false), retweet_text(false), retweet_tags(false), retweet_urls(false), orig_user_id(false), req_id(false) {}
  bool unique_id :1;
  bool user_id :1;
  bool text :1;
  bool image :1;
  bool video :1;
  bool tags :1;
  bool urls :1;
  bool tweet_type :1;
  bool recipient_id :1;
  bool orig_tweet_id :1;
  bool retweet_text :1;
  bool retweet_tags :1;
  bool retweet_urls :1;
  bool orig_user_id :1;
  bool req_id :1;
} _Tweet__isset;

class Tweet : public virtual ::apache::thrift::TBase {
 public:

  Tweet(const Tweet&);
  Tweet& operator=(const Tweet&);
  Tweet() : unique_id(), user_id(), text(), image(), video(), tags(), urls(), tweet_type(), recipient_id(), orig_tweet_id(), retweet_text(), retweet_tags(), retweet_urls(), orig_user_id(), req_id() {
  }

  virtual ~Tweet() throw();
  std::string unique_id;
  std::string user_id;
  std::string text;
  std::string image;
  std::string video;
  std::string tags;
  std::string urls;
  std::string tweet_type;
  std::string recipient_id;
  std::string orig_tweet_id;
  std::string retweet_text;
  std::string retweet_tags;
  std::string retweet_urls;
  std::string orig_user_id;
  std::string req_id;

  _Tweet__isset __isset;

  void __set_unique_id(const std::string& val);

  void __set_user_id(const std::string& val);

  void __set_text(const std::string& val);

  void __set_image(const std::string& val);

  void __set_video(const std::string& val);

  void __set_tags(const std::string& val);

  void __set_urls(const std::string& val);

  void __set_tweet_type(const std::string& val);

  void __set_recipient_id(const std::string& val);

  void __set_orig_tweet_id(const std::string& val);

  void __set_retweet_text(const std::string& val);

  void __set_retweet_tags(const std::string& val);

  void __set_retweet_urls(const std::string& val);

  void __set_orig_user_id(const std::string& val);

  void __set_req_id(const std::string& val);

  bool operator == (const Tweet & rhs) const
  {
    if (!(unique_id == rhs.unique_id))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(image == rhs.image))
      return false;
    if (!(video == rhs.video))
      return false;
    if (!(tags == rhs.tags))
      return false;
    if (!(urls == rhs.urls))
      return false;
    if (!(tweet_type == rhs.tweet_type))
      return false;
    if (!(recipient_id == rhs.recipient_id))
      return false;
    if (!(orig_tweet_id == rhs.orig_tweet_id))
      return false;
    if (!(retweet_text == rhs.retweet_text))
      return false;
    if (!(retweet_tags == rhs.retweet_tags))
      return false;
    if (!(retweet_urls == rhs.retweet_urls))
      return false;
    if (!(orig_user_id == rhs.orig_user_id))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    return true;
  }
  bool operator != (const Tweet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tweet &a, Tweet &b);

inline std::ostream& operator<<(std::ostream& out, const Tweet& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
