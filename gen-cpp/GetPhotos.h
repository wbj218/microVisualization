/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GetPhotos_H
#define GetPhotos_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NetflixMicroservices_types.h"

namespace NetflixMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GetPhotosIf {
 public:
  virtual ~GetPhotosIf() {}
  virtual void ping() = 0;
  virtual void get_photos(std::string& _return, const std::string& req_id, const std::string& movie_id) = 0;
};

class GetPhotosIfFactory {
 public:
  typedef GetPhotosIf Handler;

  virtual ~GetPhotosIfFactory() {}

  virtual GetPhotosIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GetPhotosIf* /* handler */) = 0;
};

class GetPhotosIfSingletonFactory : virtual public GetPhotosIfFactory {
 public:
  GetPhotosIfSingletonFactory(const boost::shared_ptr<GetPhotosIf>& iface) : iface_(iface) {}
  virtual ~GetPhotosIfSingletonFactory() {}

  virtual GetPhotosIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GetPhotosIf* /* handler */) {}

 protected:
  boost::shared_ptr<GetPhotosIf> iface_;
};

class GetPhotosNull : virtual public GetPhotosIf {
 public:
  virtual ~GetPhotosNull() {}
  void ping() {
    return;
  }
  void get_photos(std::string& /* _return */, const std::string& /* req_id */, const std::string& /* movie_id */) {
    return;
  }
};


class GetPhotos_ping_args {
 public:

  GetPhotos_ping_args(const GetPhotos_ping_args&);
  GetPhotos_ping_args& operator=(const GetPhotos_ping_args&);
  GetPhotos_ping_args() {
  }

  virtual ~GetPhotos_ping_args() throw();

  bool operator == (const GetPhotos_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GetPhotos_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPhotos_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetPhotos_ping_pargs {
 public:


  virtual ~GetPhotos_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetPhotos_ping_result {
 public:

  GetPhotos_ping_result(const GetPhotos_ping_result&);
  GetPhotos_ping_result& operator=(const GetPhotos_ping_result&);
  GetPhotos_ping_result() {
  }

  virtual ~GetPhotos_ping_result() throw();

  bool operator == (const GetPhotos_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GetPhotos_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPhotos_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetPhotos_ping_presult {
 public:


  virtual ~GetPhotos_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GetPhotos_get_photos_args__isset {
  _GetPhotos_get_photos_args__isset() : req_id(false), movie_id(false) {}
  bool req_id :1;
  bool movie_id :1;
} _GetPhotos_get_photos_args__isset;

class GetPhotos_get_photos_args {
 public:

  GetPhotos_get_photos_args(const GetPhotos_get_photos_args&);
  GetPhotos_get_photos_args& operator=(const GetPhotos_get_photos_args&);
  GetPhotos_get_photos_args() : req_id(), movie_id() {
  }

  virtual ~GetPhotos_get_photos_args() throw();
  std::string req_id;
  std::string movie_id;

  _GetPhotos_get_photos_args__isset __isset;

  void __set_req_id(const std::string& val);

  void __set_movie_id(const std::string& val);

  bool operator == (const GetPhotos_get_photos_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(movie_id == rhs.movie_id))
      return false;
    return true;
  }
  bool operator != (const GetPhotos_get_photos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPhotos_get_photos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetPhotos_get_photos_pargs {
 public:


  virtual ~GetPhotos_get_photos_pargs() throw();
  const std::string* req_id;
  const std::string* movie_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetPhotos_get_photos_result__isset {
  _GetPhotos_get_photos_result__isset() : success(false) {}
  bool success :1;
} _GetPhotos_get_photos_result__isset;

class GetPhotos_get_photos_result {
 public:

  GetPhotos_get_photos_result(const GetPhotos_get_photos_result&);
  GetPhotos_get_photos_result& operator=(const GetPhotos_get_photos_result&);
  GetPhotos_get_photos_result() : success() {
  }

  virtual ~GetPhotos_get_photos_result() throw();
  std::string success;

  _GetPhotos_get_photos_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const GetPhotos_get_photos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GetPhotos_get_photos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetPhotos_get_photos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetPhotos_get_photos_presult__isset {
  _GetPhotos_get_photos_presult__isset() : success(false) {}
  bool success :1;
} _GetPhotos_get_photos_presult__isset;

class GetPhotos_get_photos_presult {
 public:


  virtual ~GetPhotos_get_photos_presult() throw();
  std::string* success;

  _GetPhotos_get_photos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GetPhotosClient : virtual public GetPhotosIf {
 public:
  GetPhotosClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GetPhotosClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void get_photos(std::string& _return, const std::string& req_id, const std::string& movie_id);
  void send_get_photos(const std::string& req_id, const std::string& movie_id);
  void recv_get_photos(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GetPhotosProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GetPhotosIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GetPhotosProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_photos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GetPhotosProcessor(boost::shared_ptr<GetPhotosIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &GetPhotosProcessor::process_ping;
    processMap_["get_photos"] = &GetPhotosProcessor::process_get_photos;
  }

  virtual ~GetPhotosProcessor() {}
};

class GetPhotosProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GetPhotosProcessorFactory(const ::boost::shared_ptr< GetPhotosIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GetPhotosIfFactory > handlerFactory_;
};

class GetPhotosMultiface : virtual public GetPhotosIf {
 public:
  GetPhotosMultiface(std::vector<boost::shared_ptr<GetPhotosIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GetPhotosMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GetPhotosIf> > ifaces_;
  GetPhotosMultiface() {}
  void add(boost::shared_ptr<GetPhotosIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void get_photos(std::string& _return, const std::string& req_id, const std::string& movie_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_photos(_return, req_id, movie_id);
    }
    ifaces_[i]->get_photos(_return, req_id, movie_id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GetPhotosConcurrentClient : virtual public GetPhotosIf {
 public:
  GetPhotosConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GetPhotosConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void get_photos(std::string& _return, const std::string& req_id, const std::string& movie_id);
  int32_t send_get_photos(const std::string& req_id, const std::string& movie_id);
  void recv_get_photos(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
