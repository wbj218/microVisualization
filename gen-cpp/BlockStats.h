/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BlockStats_H
#define BlockStats_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "TwitterMicroservices_types.h"

namespace TwitterMicroservices {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BlockStatsIf {
 public:
  virtual ~BlockStatsIf() {}
  virtual void ping() = 0;
  virtual bool if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id) = 0;
  virtual void add_block(const std::string& user1_id, const std::string& user2_id) = 0;
  virtual void remove_block(const std::string& user1_id, const std::string& user2_id) = 0;
};

class BlockStatsIfFactory {
 public:
  typedef BlockStatsIf Handler;

  virtual ~BlockStatsIfFactory() {}

  virtual BlockStatsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BlockStatsIf* /* handler */) = 0;
};

class BlockStatsIfSingletonFactory : virtual public BlockStatsIfFactory {
 public:
  BlockStatsIfSingletonFactory(const boost::shared_ptr<BlockStatsIf>& iface) : iface_(iface) {}
  virtual ~BlockStatsIfSingletonFactory() {}

  virtual BlockStatsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BlockStatsIf* /* handler */) {}

 protected:
  boost::shared_ptr<BlockStatsIf> iface_;
};

class BlockStatsNull : virtual public BlockStatsIf {
 public:
  virtual ~BlockStatsNull() {}
  void ping() {
    return;
  }
  bool if_blocked(const std::string& /* user1_id */, const std::string& /* user2_id */, const std::string& /* req_id */) {
    bool _return = false;
    return _return;
  }
  void add_block(const std::string& /* user1_id */, const std::string& /* user2_id */) {
    return;
  }
  void remove_block(const std::string& /* user1_id */, const std::string& /* user2_id */) {
    return;
  }
};


class BlockStats_ping_args {
 public:

  BlockStats_ping_args(const BlockStats_ping_args&);
  BlockStats_ping_args& operator=(const BlockStats_ping_args&);
  BlockStats_ping_args() {
  }

  virtual ~BlockStats_ping_args() throw();

  bool operator == (const BlockStats_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BlockStats_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_ping_pargs {
 public:


  virtual ~BlockStats_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_ping_result {
 public:

  BlockStats_ping_result(const BlockStats_ping_result&);
  BlockStats_ping_result& operator=(const BlockStats_ping_result&);
  BlockStats_ping_result() {
  }

  virtual ~BlockStats_ping_result() throw();

  bool operator == (const BlockStats_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BlockStats_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_ping_presult {
 public:


  virtual ~BlockStats_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockStats_if_blocked_args__isset {
  _BlockStats_if_blocked_args__isset() : user1_id(false), user2_id(false), req_id(false) {}
  bool user1_id :1;
  bool user2_id :1;
  bool req_id :1;
} _BlockStats_if_blocked_args__isset;

class BlockStats_if_blocked_args {
 public:

  BlockStats_if_blocked_args(const BlockStats_if_blocked_args&);
  BlockStats_if_blocked_args& operator=(const BlockStats_if_blocked_args&);
  BlockStats_if_blocked_args() : user1_id(), user2_id(), req_id() {
  }

  virtual ~BlockStats_if_blocked_args() throw();
  std::string user1_id;
  std::string user2_id;
  std::string req_id;

  _BlockStats_if_blocked_args__isset __isset;

  void __set_user1_id(const std::string& val);

  void __set_user2_id(const std::string& val);

  void __set_req_id(const std::string& val);

  bool operator == (const BlockStats_if_blocked_args & rhs) const
  {
    if (!(user1_id == rhs.user1_id))
      return false;
    if (!(user2_id == rhs.user2_id))
      return false;
    if (!(req_id == rhs.req_id))
      return false;
    return true;
  }
  bool operator != (const BlockStats_if_blocked_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_if_blocked_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_if_blocked_pargs {
 public:


  virtual ~BlockStats_if_blocked_pargs() throw();
  const std::string* user1_id;
  const std::string* user2_id;
  const std::string* req_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockStats_if_blocked_result__isset {
  _BlockStats_if_blocked_result__isset() : success(false) {}
  bool success :1;
} _BlockStats_if_blocked_result__isset;

class BlockStats_if_blocked_result {
 public:

  BlockStats_if_blocked_result(const BlockStats_if_blocked_result&);
  BlockStats_if_blocked_result& operator=(const BlockStats_if_blocked_result&);
  BlockStats_if_blocked_result() : success(0) {
  }

  virtual ~BlockStats_if_blocked_result() throw();
  bool success;

  _BlockStats_if_blocked_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const BlockStats_if_blocked_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BlockStats_if_blocked_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_if_blocked_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockStats_if_blocked_presult__isset {
  _BlockStats_if_blocked_presult__isset() : success(false) {}
  bool success :1;
} _BlockStats_if_blocked_presult__isset;

class BlockStats_if_blocked_presult {
 public:


  virtual ~BlockStats_if_blocked_presult() throw();
  bool* success;

  _BlockStats_if_blocked_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BlockStats_add_block_args__isset {
  _BlockStats_add_block_args__isset() : user1_id(false), user2_id(false) {}
  bool user1_id :1;
  bool user2_id :1;
} _BlockStats_add_block_args__isset;

class BlockStats_add_block_args {
 public:

  BlockStats_add_block_args(const BlockStats_add_block_args&);
  BlockStats_add_block_args& operator=(const BlockStats_add_block_args&);
  BlockStats_add_block_args() : user1_id(), user2_id() {
  }

  virtual ~BlockStats_add_block_args() throw();
  std::string user1_id;
  std::string user2_id;

  _BlockStats_add_block_args__isset __isset;

  void __set_user1_id(const std::string& val);

  void __set_user2_id(const std::string& val);

  bool operator == (const BlockStats_add_block_args & rhs) const
  {
    if (!(user1_id == rhs.user1_id))
      return false;
    if (!(user2_id == rhs.user2_id))
      return false;
    return true;
  }
  bool operator != (const BlockStats_add_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_add_block_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_add_block_pargs {
 public:


  virtual ~BlockStats_add_block_pargs() throw();
  const std::string* user1_id;
  const std::string* user2_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BlockStats_remove_block_args__isset {
  _BlockStats_remove_block_args__isset() : user1_id(false), user2_id(false) {}
  bool user1_id :1;
  bool user2_id :1;
} _BlockStats_remove_block_args__isset;

class BlockStats_remove_block_args {
 public:

  BlockStats_remove_block_args(const BlockStats_remove_block_args&);
  BlockStats_remove_block_args& operator=(const BlockStats_remove_block_args&);
  BlockStats_remove_block_args() : user1_id(), user2_id() {
  }

  virtual ~BlockStats_remove_block_args() throw();
  std::string user1_id;
  std::string user2_id;

  _BlockStats_remove_block_args__isset __isset;

  void __set_user1_id(const std::string& val);

  void __set_user2_id(const std::string& val);

  bool operator == (const BlockStats_remove_block_args & rhs) const
  {
    if (!(user1_id == rhs.user1_id))
      return false;
    if (!(user2_id == rhs.user2_id))
      return false;
    return true;
  }
  bool operator != (const BlockStats_remove_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockStats_remove_block_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BlockStats_remove_block_pargs {
 public:


  virtual ~BlockStats_remove_block_pargs() throw();
  const std::string* user1_id;
  const std::string* user2_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class BlockStatsClient : virtual public BlockStatsIf {
 public:
  BlockStatsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BlockStatsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  bool if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id);
  void send_if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id);
  bool recv_if_blocked();
  void add_block(const std::string& user1_id, const std::string& user2_id);
  void send_add_block(const std::string& user1_id, const std::string& user2_id);
  void remove_block(const std::string& user1_id, const std::string& user2_id);
  void send_remove_block(const std::string& user1_id, const std::string& user2_id);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BlockStatsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BlockStatsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BlockStatsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_if_blocked(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_block(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_block(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BlockStatsProcessor(boost::shared_ptr<BlockStatsIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &BlockStatsProcessor::process_ping;
    processMap_["if_blocked"] = &BlockStatsProcessor::process_if_blocked;
    processMap_["add_block"] = &BlockStatsProcessor::process_add_block;
    processMap_["remove_block"] = &BlockStatsProcessor::process_remove_block;
  }

  virtual ~BlockStatsProcessor() {}
};

class BlockStatsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BlockStatsProcessorFactory(const ::boost::shared_ptr< BlockStatsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BlockStatsIfFactory > handlerFactory_;
};

class BlockStatsMultiface : virtual public BlockStatsIf {
 public:
  BlockStatsMultiface(std::vector<boost::shared_ptr<BlockStatsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BlockStatsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BlockStatsIf> > ifaces_;
  BlockStatsMultiface() {}
  void add(boost::shared_ptr<BlockStatsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  bool if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->if_blocked(user1_id, user2_id, req_id);
    }
    return ifaces_[i]->if_blocked(user1_id, user2_id, req_id);
  }

  void add_block(const std::string& user1_id, const std::string& user2_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_block(user1_id, user2_id);
    }
    ifaces_[i]->add_block(user1_id, user2_id);
  }

  void remove_block(const std::string& user1_id, const std::string& user2_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_block(user1_id, user2_id);
    }
    ifaces_[i]->remove_block(user1_id, user2_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BlockStatsConcurrentClient : virtual public BlockStatsIf {
 public:
  BlockStatsConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BlockStatsConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  bool if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id);
  int32_t send_if_blocked(const std::string& user1_id, const std::string& user2_id, const std::string& req_id);
  bool recv_if_blocked(const int32_t seqid);
  void add_block(const std::string& user1_id, const std::string& user2_id);
  void send_add_block(const std::string& user1_id, const std::string& user2_id);
  void remove_block(const std::string& user1_id, const std::string& user2_id);
  void send_remove_block(const std::string& user1_id, const std::string& user2_id);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
