#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def ping(self):
        pass

    def compose_page(self, req_id, movie_id, user_id):
        """
        Parameters:
         - req_id
         - movie_id
         - user_id
        """
        pass

    def upload_plot(self, req_id, movie_id, plot):
        """
        Parameters:
         - req_id
         - movie_id
         - plot
        """
        pass

    def upload_rating(self, req_id, movie_id, rating):
        """
        Parameters:
         - req_id
         - movie_id
         - rating
        """
        pass

    def upload_thumbnail(self, req_id, movie_id, thumbnail):
        """
        Parameters:
         - req_id
         - movie_id
         - thumbnail
        """
        pass

    def upload_cast_info(self, req_id, movie_id, cast_info):
        """
        Parameters:
         - req_id
         - movie_id
         - cast_info
        """
        pass

    def upload_photo(self, req_id, movie_id, photo):
        """
        Parameters:
         - req_id
         - movie_id
         - photo
        """
        pass

    def upload_video(self, req_id, movie_id, video):
        """
        Parameters:
         - req_id
         - movie_id
         - video
        """
        pass

    def upload_movie_review(self, req_id, movie_id, reviews):
        """
        Parameters:
         - req_id
         - movie_id
         - reviews
        """
        pass

    def upload_watch_next(self, req_id, user_id, watch_next):
        """
        Parameters:
         - req_id
         - user_id
         - watch_next
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def ping(self):
        self.send_ping()
        self.recv_ping()

    def send_ping(self):
        self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ping(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def compose_page(self, req_id, movie_id, user_id):
        """
        Parameters:
         - req_id
         - movie_id
         - user_id
        """
        self.send_compose_page(req_id, movie_id, user_id)
        return self.recv_compose_page()

    def send_compose_page(self, req_id, movie_id, user_id):
        self._oprot.writeMessageBegin('compose_page', TMessageType.CALL, self._seqid)
        args = compose_page_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.user_id = user_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_compose_page(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = compose_page_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "compose_page failed: unknown result")

    def upload_plot(self, req_id, movie_id, plot):
        """
        Parameters:
         - req_id
         - movie_id
         - plot
        """
        self.send_upload_plot(req_id, movie_id, plot)

    def send_upload_plot(self, req_id, movie_id, plot):
        self._oprot.writeMessageBegin('upload_plot', TMessageType.ONEWAY, self._seqid)
        args = upload_plot_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.plot = plot
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_rating(self, req_id, movie_id, rating):
        """
        Parameters:
         - req_id
         - movie_id
         - rating
        """
        self.send_upload_rating(req_id, movie_id, rating)

    def send_upload_rating(self, req_id, movie_id, rating):
        self._oprot.writeMessageBegin('upload_rating', TMessageType.ONEWAY, self._seqid)
        args = upload_rating_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.rating = rating
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_thumbnail(self, req_id, movie_id, thumbnail):
        """
        Parameters:
         - req_id
         - movie_id
         - thumbnail
        """
        self.send_upload_thumbnail(req_id, movie_id, thumbnail)

    def send_upload_thumbnail(self, req_id, movie_id, thumbnail):
        self._oprot.writeMessageBegin('upload_thumbnail', TMessageType.ONEWAY, self._seqid)
        args = upload_thumbnail_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.thumbnail = thumbnail
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_cast_info(self, req_id, movie_id, cast_info):
        """
        Parameters:
         - req_id
         - movie_id
         - cast_info
        """
        self.send_upload_cast_info(req_id, movie_id, cast_info)

    def send_upload_cast_info(self, req_id, movie_id, cast_info):
        self._oprot.writeMessageBegin('upload_cast_info', TMessageType.ONEWAY, self._seqid)
        args = upload_cast_info_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.cast_info = cast_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_photo(self, req_id, movie_id, photo):
        """
        Parameters:
         - req_id
         - movie_id
         - photo
        """
        self.send_upload_photo(req_id, movie_id, photo)

    def send_upload_photo(self, req_id, movie_id, photo):
        self._oprot.writeMessageBegin('upload_photo', TMessageType.ONEWAY, self._seqid)
        args = upload_photo_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.photo = photo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_video(self, req_id, movie_id, video):
        """
        Parameters:
         - req_id
         - movie_id
         - video
        """
        self.send_upload_video(req_id, movie_id, video)

    def send_upload_video(self, req_id, movie_id, video):
        self._oprot.writeMessageBegin('upload_video', TMessageType.ONEWAY, self._seqid)
        args = upload_video_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.video = video
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_movie_review(self, req_id, movie_id, reviews):
        """
        Parameters:
         - req_id
         - movie_id
         - reviews
        """
        self.send_upload_movie_review(req_id, movie_id, reviews)

    def send_upload_movie_review(self, req_id, movie_id, reviews):
        self._oprot.writeMessageBegin('upload_movie_review', TMessageType.ONEWAY, self._seqid)
        args = upload_movie_review_args()
        args.req_id = req_id
        args.movie_id = movie_id
        args.reviews = reviews
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def upload_watch_next(self, req_id, user_id, watch_next):
        """
        Parameters:
         - req_id
         - user_id
         - watch_next
        """
        self.send_upload_watch_next(req_id, user_id, watch_next)

    def send_upload_watch_next(self, req_id, user_id, watch_next):
        self._oprot.writeMessageBegin('upload_watch_next', TMessageType.ONEWAY, self._seqid)
        args = upload_watch_next_args()
        args.req_id = req_id
        args.user_id = user_id
        args.watch_next = watch_next
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["ping"] = Processor.process_ping
        self._processMap["compose_page"] = Processor.process_compose_page
        self._processMap["upload_plot"] = Processor.process_upload_plot
        self._processMap["upload_rating"] = Processor.process_upload_rating
        self._processMap["upload_thumbnail"] = Processor.process_upload_thumbnail
        self._processMap["upload_cast_info"] = Processor.process_upload_cast_info
        self._processMap["upload_photo"] = Processor.process_upload_photo
        self._processMap["upload_video"] = Processor.process_upload_video
        self._processMap["upload_movie_review"] = Processor.process_upload_movie_review
        self._processMap["upload_watch_next"] = Processor.process_upload_watch_next

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        try:
            self._handler.ping()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_compose_page(self, seqid, iprot, oprot):
        args = compose_page_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = compose_page_result()
        try:
            result.success = self._handler.compose_page(args.req_id, args.movie_id, args.user_id)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("compose_page", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_upload_plot(self, seqid, iprot, oprot):
        args = upload_plot_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_plot(args.req_id, args.movie_id, args.plot)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_rating(self, seqid, iprot, oprot):
        args = upload_rating_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_rating(args.req_id, args.movie_id, args.rating)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_thumbnail(self, seqid, iprot, oprot):
        args = upload_thumbnail_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_thumbnail(args.req_id, args.movie_id, args.thumbnail)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_cast_info(self, seqid, iprot, oprot):
        args = upload_cast_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_cast_info(args.req_id, args.movie_id, args.cast_info)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_photo(self, seqid, iprot, oprot):
        args = upload_photo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_photo(args.req_id, args.movie_id, args.photo)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_video(self, seqid, iprot, oprot):
        args = upload_video_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_video(args.req_id, args.movie_id, args.video)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_movie_review(self, seqid, iprot, oprot):
        args = upload_movie_review_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_movie_review(args.req_id, args.movie_id, args.reviews)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

    def process_upload_watch_next(self, seqid, iprot, oprot):
        args = upload_watch_next_args()
        args.read(iprot)
        iprot.readMessageEnd()
        try:
            self._handler.upload_watch_next(args.req_id, args.user_id, args.watch_next)
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except:
            pass

# HELPER FUNCTIONS AND STRUCTURES


class ping_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ping_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ping_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ping_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class compose_page_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - user_id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'user_id', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, user_id=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.user_id = user_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.user_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('compose_page_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.STRING, 3)
            oprot.writeString(self.user_id.encode('utf-8') if sys.version_info[0] == 2 else self.user_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class compose_page_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (MoviePage, MoviePage.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MoviePage()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('compose_page_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_plot_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - plot
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'plot', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, plot=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.plot = plot

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.plot = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_plot_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.plot is not None:
            oprot.writeFieldBegin('plot', TType.STRING, 3)
            oprot.writeString(self.plot.encode('utf-8') if sys.version_info[0] == 2 else self.plot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_rating_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - rating
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'rating', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, rating=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.rating = rating

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.rating = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_rating_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.rating is not None:
            oprot.writeFieldBegin('rating', TType.STRING, 3)
            oprot.writeString(self.rating.encode('utf-8') if sys.version_info[0] == 2 else self.rating)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_thumbnail_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - thumbnail
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'thumbnail', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, thumbnail=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.thumbnail = thumbnail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_thumbnail_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 3)
            oprot.writeString(self.thumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnail)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_cast_info_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - cast_info
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'cast_info', (TType.STRUCT, (CastInfo, CastInfo.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, cast_info=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.cast_info = cast_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.cast_info = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = CastInfo()
                        _elem26.read(iprot)
                        self.cast_info.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_cast_info_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.cast_info is not None:
            oprot.writeFieldBegin('cast_info', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.cast_info))
            for iter27 in self.cast_info:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_photo_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - photo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'photo', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, photo=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.photo = photo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.photo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_photo_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.photo is not None:
            oprot.writeFieldBegin('photo', TType.STRING, 3)
            oprot.writeString(self.photo.encode('utf-8') if sys.version_info[0] == 2 else self.photo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_video_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - video
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'video', 'UTF8', None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, video=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.video = video

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.video = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_video_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.video is not None:
            oprot.writeFieldBegin('video', TType.STRING, 3)
            oprot.writeString(self.video.encode('utf-8') if sys.version_info[0] == 2 else self.video)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_movie_review_args(object):
    """
    Attributes:
     - req_id
     - movie_id
     - reviews
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'movie_id', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'reviews', (TType.STRUCT, (Review, Review.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, req_id=None, movie_id=None, reviews=None,):
        self.req_id = req_id
        self.movie_id = movie_id
        self.reviews = reviews

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.movie_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.reviews = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Review()
                        _elem33.read(iprot)
                        self.reviews.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_movie_review_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.movie_id is not None:
            oprot.writeFieldBegin('movie_id', TType.STRING, 2)
            oprot.writeString(self.movie_id.encode('utf-8') if sys.version_info[0] == 2 else self.movie_id)
            oprot.writeFieldEnd()
        if self.reviews is not None:
            oprot.writeFieldBegin('reviews', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.reviews))
            for iter34 in self.reviews:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class upload_watch_next_args(object):
    """
    Attributes:
     - req_id
     - user_id
     - watch_next
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'req_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'user_id', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'watch_next', (TType.STRING, 'UTF8', False), None, ),  # 3
    )

    def __init__(self, req_id=None, user_id=None, watch_next=None,):
        self.req_id = req_id
        self.user_id = user_id
        self.watch_next = watch_next

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.req_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.user_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.watch_next = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.watch_next.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('upload_watch_next_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.STRING, 1)
            oprot.writeString(self.req_id.encode('utf-8') if sys.version_info[0] == 2 else self.req_id)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.STRING, 2)
            oprot.writeString(self.user_id.encode('utf-8') if sys.version_info[0] == 2 else self.user_id)
            oprot.writeFieldEnd()
        if self.watch_next is not None:
            oprot.writeFieldBegin('watch_next', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.watch_next))
            for iter41 in self.watch_next:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
